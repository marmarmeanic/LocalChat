from async_sender import Mail
from aiogram import Bot, Dispatcher, types
from aiogram.types import CallbackQuery
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from aiogram.types.reply_keyboard import ReplyKeyboardRemove
from aiogram.dispatcher.filters import BoundFilter

import cfg
import database

from loguru import logger

import functions

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
logger.add('logs/bot.log')

back = KeyboardButton('–ù–∞–∑–∞–¥ ‚¨Ö')
back_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(back)
profile_btn = KeyboardButton('üë§‚Äç –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å')
profile_add_btn = KeyboardButton('üë§‚Äç –°–æ–∑–¥–∞—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å')
information_btn = KeyboardButton('üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ')


# –ö–ª–∞—Å—Å –¥–ª—è fsm –º–∞—à–∏–Ω—ã (–¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏)
class new_user(StatesGroup):
    name = State()
    age = State()
    group = State()


# –ö–ª–∞—Å—Å –¥–ª—è fsm –º–∞—à–∏–Ω—ã (–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–µ—Ç–∫–∏)
class register_uchetka(StatesGroup):
    mail = State()
    mail_code = State()


# –ü–æ–¥–≥—Ä—É–∑–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –µ—Å—Ç—å –ª–∏ —É —á–µ–ª–æ–≤–µ–∫–∞ —É—á–µ—Ç–∫–∞
def load_start_kb(user) -> ReplyKeyboardMarkup:
    ret = ReplyKeyboardMarkup(resize_keyboard=True)
    if user['site_user_id']:
        ret.add(profile_btn)
    else:
        ret.add(profile_add_btn)
    ret.add(information_btn)
    return ret


# –§–∏–ª—å—Ç—Ä –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ
class is_private(BoundFilter):
    async def check(self, message: types.Message) -> bool:
        if message.chat.type != types.ChatType.PRIVATE:
            return False
        return True


# –§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã Start –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
class start_ob(BoundFilter):
    async def check(self, message: types.Message) -> bool:
        user = await dbase.get_user(message.from_user.id)
        state = dp.current_state()
        await state.finish()
        if user:
            if user['is_admin']:
                await message.answer('–í—ã –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)', reply_markup=load_start_kb(user))
                return False
            if user['is_member']:
                await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=load_start_kb(user))
                return False
            if user['in_await']:
                await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏!')
                return False
        return True


# –§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
class profile_add_ob(BoundFilter):
    async def check(self, message: types.Message) -> bool:
        user = await dbase.get_user(message.from_user.id)
        if user['is_member']:
            if not user['site_user_id']:
                return True
        return False


# –§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
class profile_get_ob(BoundFilter):
    async def check(self, message: types.Message) -> bool:
        user = await dbase.get_user(message.from_user.id)
        if user['is_member']:
            if user['site_user_id']:
                return True
        return False


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
dbase = database.DataBase(
    user=cfg.user,
    password=cfg.password,
    database=cfg.database,
    host=cfg.host,
    port=cfg.port
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
mail = Mail(hostname=cfg.SMPT_hostname, port=cfg.SMPT_port, username=cfg.email, password=cfg.email_password)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=cfg.bot_token, parse_mode="HTML")
dp = Dispatcher(bot=bot, storage=MemoryStorage())


@dp.message_handler(start_ob(), state='*', text=['–ù–∞–∑–∞–¥ ‚¨Ö'])
async def back(message: types.Message, state: FSMContext):
    await message.answer('–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!',
                         reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('üìÉ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')))
    await state.finish()


@dp.message_handler(is_private(), start_ob(), commands=["start"])
async def start(message: types.Message):
    await dbase.add_user(message.from_user.id, message.from_user.username)
    await message.answer('–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!',
                         reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('üìÉ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')))


@dp.message_handler(is_private(), start_ob(), text=["üìÉ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"])
async def zayav_start(message: types.Message):
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:', reply_markup=back_keyboard)
    await new_user.name.set()


@dp.message_handler(content_types=types.ContentType.TEXT, state=new_user.name)
async def set_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await new_user.next()
    await bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')


@dp.message_handler(content_types=types.ContentType.TEXT, state=new_user.age)
async def set_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['age'] = message.text
    await new_user.next()
    await bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:')


@dp.message_handler(content_types=types.ContentType.TEXT, state=new_user.group)
async def set_group(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await bot.send_message(cfg.absolute_admin,
                               f'<b>üìÉ –ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç</b>\n'
                               f'–ò–º—è: {data["name"]}\n–í–æ–∑—Ä–∞—Å—Ç: {data["age"]}\n–ì—Ä—É–ø–ø–∞: {message.text}',
                               reply_markup=InlineKeyboardMarkup().add(
                                    InlineKeyboardButton('‚úÖ', callback_data=f'accept|{message.from_user.id}'),
                                    InlineKeyboardButton('‚ùå', callback_data=f'decline|{message.from_user.id}')
                                )
                               )
    await dbase.edit_user(message.from_user.id, 'in_await', 1)
    await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ', reply_markup=ReplyKeyboardRemove())
    await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith("accept"))
async def accept(query: CallbackQuery):
    member_id = query.data.split('|')[1]
    await query.answer('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏–Ω—è—Ç')
    await dbase.edit_user(member_id, 'in_await', 0)
    await dbase.edit_user(member_id, 'is_member', 1)
    await bot.edit_message_text(query.message.text + '\n\n‚úÖ –ü—Ä–∏–Ω—è—Ç', query.message.chat.id,
                                query.message.message_id, reply_markup=None)
    try:
        user = await dbase.get_user(int(member_id))
        await bot.send_message(member_id, '–í—ã –ø—Ä–∏–Ω—è—Ç—ã', reply_markup=load_start_kb(user))
    except Exception as e:
        logger.error(e)


@dp.callback_query_handler(lambda c: c.data.startswith("decline"))
async def decline(query: CallbackQuery):
    member_id = query.data.split('|')[1]
    await query.answer('‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –ø—Ä–∏–Ω—è—Ç!')
    await bot.edit_message_text(query.message.text + '\n\n‚ùå –ù–µ –ø—Ä–∏–Ω—è—Ç', query.message.chat.id,
                                query.message.message_id, reply_markup=None)
    try:
        await bot.send_message(member_id, '–£–≤—ã, –≤—ã –Ω–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ!')
    except Exception as e:
        logger.error(e)


@dp.message_handler(is_private(), profile_add_ob(), text=["üë§‚Äç –°–æ–∑–¥–∞—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å"])
async def uchetka_add(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É:', reply_markup=back_keyboard)
    await register_uchetka.mail.set()


@dp.message_handler(content_types=types.ContentType.TEXT, state=register_uchetka.mail)
async def set_mail(message: types.Message, state: FSMContext):
    print(message.text)
    if functions.mail_pattern(message.text):
        if not await dbase.get_by_mail(message.text):
            async with state.proxy() as data:
                await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –ø–æ—á—Ç—ã:')
                data['mail'] = message.text
                data['prov_code'] = functions.get_random_string(6)
                await functions.send_code(mail, message.text, data['prov_code'])
                await register_uchetka.next()
        else:
            await message.answer('–ü–æ—á—Ç–∞ –±—ã–ª–∞ –∑–∞–Ω—è—Ç–∞!')
            await state.finish()
    else:
        await message.answer('–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—á—Ç–∞!')
        await state.finish()


@dp.message_handler(content_types=types.ContentType.TEXT, state=register_uchetka.mail_code)
async def set_code(message: types.Message, state: FSMContext):
    print(message.text)
    async with state.proxy() as data:
        if message.text == data['prov_code'] or message.text == "ADMIN":
            user_password = functions.get_random_string(8)
            site_id = await dbase.create_uchetka(data['mail'], functions.hash_password(user_password))
            await dbase.edit_user(message.from_user.id, 'site_user_id', site_id)
            user = await dbase.get_user(message.from_user.id)
            await message.answer('–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!', reply_markup=load_start_kb(user))
            await message.answer(f'–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ\n'
                                 f' <span class="tg-spoiler">{user_password}</span>')
            await state.finish()
        else:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!')


@dp.message_handler(is_private(), profile_get_ob(), text=["üë§‚Äç –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å"])
async def uchetka_get(message: types.Message):
    user = await dbase.get_user(message.from_user.id)
    site_user = await dbase.get_uchetka_by_id(user['site_user_id'])
    await message.answer(f'''–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
<b>–ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç–µ:</b> <code>{user['site_user_id']}</code>
<b>–ü–æ—á—Ç–∞:</b> <code>{site_user["email"]}</code>

<b>–¢–≥ –∞–π–¥–∏:{message.from_user.id}</b>
''', reply_markup=back_keyboard)


@dp.message_handler(is_private(), text=["üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"])
async def information(message: types.Message):
    await message.answer(cfg.information_text)


# –ó–∞–ø—É—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –±–∞–∑—ã
async def start_db(_):
    logger.info(f'Started!')
    await dbase.start_connection()


dp.filters_factory.bind(start_ob)

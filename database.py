import asyncpg
import math
import time
from loguru import logger

logger.add('logs/dbase.log')


class DataBase:
    def __init__(self, user, password, database, host, port):
        self.__db_user = user
        self.__db_password = password
        self.__db_name = database
        self.__db_host = host
        self.__db_port = port

    # Коннект к базе
    async def create_pool(self):
        self.__db_pool = await asyncpg.create_pool(
            user=self.__db_user,
            password=self.__db_password,
            database=self.__db_name,
            host=self.__db_host,
            port=self.__db_port
        )

    # Создание таблиц
    async def create_tables(self):
        async with self.__db_pool.acquire() as connection:
            async with connection.transaction():
                await connection.execute("""
                    CREATE TABLE IF NOT EXISTS bot_users(
                        user_id BIGINT UNIQUE NOT NULL PRIMARY KEY,
                        username TEXT,
                        is_admin INTEGER DEFAULT 0,
                        is_member INTEGER DEFAULT 0,
                        regtime BIGINT,
                        in_await INT DEFAULT 0,
                        site_user_id BIGINT
                    )
                """)

                await connection.execute("""
                    CREATE TABLE IF NOT EXISTS site_users(
                        site_user_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        email TEXT,
                        password TEXT,
                        token TEXT,
                        expires BIGINT
                    )
                """)

                await connection.execute("""
                    CREATE TABLE IF NOT EXISTS messages(
                        message_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        creator_id BIGINT,
                        message_data TEXT,
                        time BIGINT
                    )
                """)

    async def start_connection(self):
        await self.create_pool()
        await self.create_tables()

    # Работа с учетными записями (сайт)
    async def get_uchetki(self) -> list:
        async with self.__db_pool.acquire() as connection:
            try:
                async with connection.transaction():
                    query = "SELECT * FROM site_users"
                    result = await connection.fetch(query, math.floor(time.time()))
                    return result
            except Exception as e:
                logger.error(e)

    async def get_uchetka_by_id(self, site_user_id: int) -> asyncpg.Record:
        async with self.__db_pool.acquire() as connection:
            try:
                async with connection.transaction():
                    query = """
                          SELECT * FROM site_users
                          WHERE site_user_id = $1
                          LIMIT 1
                      """
                    res = await connection.fetchrow(query, site_user_id)
                    return res
            except Exception as e:
                logger.error(e)

    async def get_by_mail(self, site_user_mail: str) -> asyncpg.Record:
        async with self.__db_pool.acquire() as connection:
            try:
                async with connection.transaction():
                    query = """
                          SELECT * FROM site_users
                          WHERE email = $1
                          LIMIT 1
                      """
                    res = await connection.fetchrow(query, site_user_mail)
                    return res
            except Exception as e:
                logger.error(e)

    async def create_uchetka(self, email: str, password_hash: str) -> int or bool:
        async with self.__db_pool.acquire() as connection:
            try:
                async with connection.transaction():
                    insert_query = """
                        INSERT INTO site_users (email, password)
                        VALUES ($1, $2)
                    """
                    await connection.execute(insert_query, email, password_hash)
                    query = "SELECT * FROM site_users WHERE email = $1 LIMIT 1"
                    res = await connection.fetchrow(query, email)
                    return res['site_user_id']
            except Exception as e:
                logger.error(e)
                return False

    async def set_session(self, site_user_id: int, token: str, expires: int) -> None:
        async with self.__db_pool.acquire() as connection:
            try:
                async with connection.transaction():
                    query = f"UPDATE site_users SET token = $1, expires = $2 WHERE site_user_id = $3"
                    await connection.execute(query, token, expires, site_user_id)
            except Exception as e:
                logger.error(e)

    async def get_profile_by_key(self, token) -> None or asyncpg.Record:
        async with self.__db_pool.acquire() as connection:
            try:
                async with connection.transaction():
                    query = """
                          SELECT * FROM site_users
                          WHERE token = $1
                          LIMIT 1
                      """
                    res = await connection.fetchrow(query, token)
                    return res
            except Exception as e:
                logger.error(e)

    async def add_message(self, creator_id, message_data) -> bool:
        async with self.__db_pool.acquire() as connection:
            try:
                async with connection.transaction():
                    insert_query = """
                        INSERT INTO messages (creator_id, message_data, time)
                        VALUES ($1, $2, $3)
                    """
                    await connection.execute(insert_query, creator_id, message_data, math.floor(time.time()))
                    return True
            except Exception as e:
                logger.error(e)
                return False

    async def get_messages(self) -> list:
        async with self.__db_pool.acquire() as connection:
            try:
                async with connection.transaction():
                    query = """
                          SELECT * FROM messages
                          ORDER BY time DESC
                          LIMIT 20
                      """
                    res = await connection.fetch(query)
                    return res
            except Exception as e:
                logger.error(e)

    async def log_out(self, site_user_id):
        async with self.__db_pool.acquire() as connection:
            try:
                async with connection.transaction():
                    query = """
                          UPDATE site_users
                          SET token = NULL, expires = NULL
                          WHERE site_user_id = $1;
                      """
                    await connection.execute(query, site_user_id)
            except Exception as e:
                logger.error(e)

    # функции для бота
    async def add_user(self, user_id: int, username: str) -> None:
        async with self.__db_pool.acquire() as connection:
            try:
                async with connection.transaction():
                    query = """
                        SELECT * FROM bot_users
                        WHERE user_id = $1
                        LIMIT 1
                    """
                    res = await connection.fetchrow(query, user_id)
                    if not res:
                        insert_query = """
                            INSERT INTO bot_users (user_id, username, regtime)
                            VALUES ($1, $2, $3)
                        """
                        await connection.execute(insert_query, user_id, username, math.floor(time.time()))
            except Exception as e:
                logger.error(e)

    async def get_user(self, user_id) -> asyncpg.Record:
        async with self.__db_pool.acquire() as connection:
            try:
                async with connection.transaction():
                    query = """
                        SELECT * FROM bot_users
                        WHERE user_id = $1
                        LIMIT 1
                    """
                    res = await connection.fetchrow(query, user_id)
                    return res
            except Exception as e:
                logger.error(e)

    async def edit_user(self, user_id, pole, status) -> None:
        async with self.__db_pool.acquire() as connection:
            try:
                async with connection.transaction():
                    query = f"UPDATE bot_users SET {pole} = $1 WHERE user_id = $2"
                    await connection.execute(query, status, int(user_id))
            except Exception as e:
                logger.error(e)

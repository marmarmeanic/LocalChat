1. Frontend
	1.1 Дизайн
	1.2 Верстка HTML | CSS
	1.3 Написание Js кода

2. Backend
	2.1 База данных
		- Создание таблиц
		- Функции для работы с таблицами
			• Получение учетной записи по Id (get_uchetka_by_id)
			• Получение учетной записи по Почте (get_uchetka_by_id)
			• Создание учетной записи (create_uchetka)
			• Добавление Cookie (set_session)
			• Получение учетной записи по Cookie (get_profile_by_key)
			• Добавление сообщений (add_message)
			• Получение сообщений (get_messages)
			• Выход из учетной записи - очистка полей с Cookie (log_out)

	2.2 Различные функции, которые используются
		- Класс для удобной работы с подключениями по Websocket (ConnectionManager)
			• Инициализация класса (__init__)
			• Функция для подключения пользователя (connect)
			• Функция для отключения пользователя (disconnect)
			• Функция для обработки сообщений от пользователя (on_message)
			• Функция для получения онлайна (get_online)
		• Получение рандомной строки (get_random_string)
		• Получение sha256 хэша пароля (hash_password)
		• Проверка валидности пароля (validate_password)
		• Проверка актуальности Cookie (check_actuality)

	2.3 Основные хендлеры запросов
		• Get запрос (/)
		• Get запрос (/login)
		• Get запрос (/chat)
		• Get запрос (/logout)
		• Get запрос (/last)
		• Get запрос (/online)
		• Post запрос (/auth)
		• Websocket запрос (/ws)

3. Telegram бот
	3.1 База данных
		- Создание таблицы
		- Функции для работы с таблицей
			• Добавление пользователя в базу (add_user)
			• Получение пользователя из базы (get_user)
			• Изменение полей у пользователя (edit_user)

	3.2 Функции / Классы используемые в боте
		• Класс для fsm машины для подачи заявки (new_user)
			- name
			- age
			- group
		• Класс для fsm машины для регистрации учетной записи (register_uchetka)
			- mail
			- mail_code
		• Функция для подргузки клавиатуры в зависимости есть ли учетная запись (load_start_kb)
		• Класс для проверки запущен ли бот в личных сообщениях (is_private)
		• Класс для обработки /start или нажатие на кнопку назад (start_ob)
		• Класс для обработки создания учетной записи (profile_add_ob)
		• Класс для обработки хендлера для получения профиля (profile_get_ob)
		• Функция для обработки введенной почты (mail_pattern)
		• Функция для отправки кода подтверждения учетной записи по почте (send_code)

	3.3 Хендлеры сообщений / Хендлеры CallbackData
		• Хендлер кнопки "назад"
		• Хендлер комманды "/start"
		• Хендлер кнопки "подать заявку"
		• Хендлер fsm машины класса "new_user" для переменной "name"
		• Хендлер fsm машины класса "new_user" для переменной "age"
		• Хендлер fsm машины класса "new_user" для переменной "group"
		• Хендлер Callbackdata для принятия заявки пользователя
		• Хендлер Callbackdata для отклонения заявки пользователя
		• Хендлер кнопки "Создать учетную запись"
		• Хендлер fsm машины класса "register_uchetka" для переменной "mail"
		• Хендлер fsm машины класса "register_uchetka" для переменной "mail_code"
		• Хендлер кнопки "учетная запись"
		• Хендлер кнопки "информация о проекте"




2.1 База данных
Асинхронная функция create_tables также используется, для создания таблиц в базе данных.
Передача: Функция принимает ссылку на объект self, что может представлять экземпляр класса базы данных.
Возвращаемое значение: Функция не возвращает явного значения.
Описание действий функции:
	Она асинхронно устанавливает соединение с базой данных.
	В транзакции создает две таблицы (site_users и messages), если они еще не существуют в базе данных.
	Каждая таблица имеет свою собственную схему с заданными полями и ограничениями.
	Поля в таблицах определяются с использованием различных типов данных, таких как BIGINT, TEXT, и т.д.
	Для некоторых полей установлены значения по умолчанию (DEFAULT).
	Некоторые поля являются первичными ключами (PRIMARY KEY), чтобы обеспечить уникальность записей.
	Поле GENERATED BY DEFAULT AS IDENTITY используется для автоматической генерации уникальных идентификаторов при вставке новых записей в таблицу.
	Каждый SQL-запрос выполняется асинхронно с использованием ключевого слова await.
	Все операции производятся в транзакции, что обеспечивает атомарность выполнения запросов.

Эта функция является частью процесса инициализации базы данных для приложения и создает необходимые таблицы для хранения данных пользователей и сообщений.

2.2 Разные функции
Асинхронная функция `get_uchetka_by_id` используется, для получения информации о пользователе из таблицы `site_users` по их `site_user_id`.
1. **Передача**: Функция принимает ссылку на объект `self`, предположительно, представляющий экземпляр класса базы данных, и `site_user_id`, который является целым числом идентификатором пользователя.

2. **Возвращаемое значение**: Функция возвращает объект типа `asyncpg.Record`, который вероятно содержит информацию о пользователе из базы данных.

3. **Описание действий функции**:
   - Она асинхронно устанавливает соединение с базой данных.
   - В транзакции выполняет SQL-запрос для выборки данных из таблицы `site_users`, используя предоставленный `site_user_id`.
   - Запрос выбирает все столбцы из таблицы, где `site_user_id` равен предоставленному значению. Он также ограничивает результат одной записью с помощью `LIMIT 1`.
   - Результат запроса сохраняется в переменную `res` с использованием `fetchrow`, который возвращает одну строку или `None`, если ничего не найдено.
   - Если запрос успешно завершается, функция возвращает результат запроса.
   - Если возникает ошибка, она логируется, но функция не прерывается и не выбрасывает исключение.

Эта функция предназначена для извлечения информации о пользователе из базы данных по их идентификатору, предоставляя асинхронный интерфейс для выполнения запросов.



Асинхронная функция `get_by_mail` используется, вероятно, для получения информации о пользователе из таблицы `site_users` по их адресу электронной почты (`email`).
1. **Передача**: Функция принимает ссылку на объект `self`, представляющий экземпляр класса базы данных, и `site_user_mail`, который является строкой, содержащей адрес электронной почты пользователя.

2. **Возвращаемое значение**: Функция возвращает объект типа `asyncpg.Record`, который, вероятно, содержит информацию о пользователе из базы данных.

3. **Описание действий функции**:
   - Она асинхронно устанавливает соединение с базой данных.
   - В транзакции выполняется SQL-запрос для выборки данных из таблицы `site_users`, используя предоставленный адрес электронной почты.
   - Запрос выбирает все столбцы из таблицы, где `email` равен предоставленному значению. Он также ограничивает результат одной записью с помощью `LIMIT 1`.
   - Результат запроса сохраняется в переменную `res` с использованием `fetchrow`, который возвращает одну строку или `None`, если ничего не найдено.
   - Если запрос успешно завершается, функция возвращает результат запроса.
   - Если возникает ошибка, она логируется, но функция не прерывается и не выбрасывает исключение.

Эта функция предназначена для поиска информации о пользователе в базе данных по их адресу электронной почты, предоставляя асинхронный интерфейс для выполнения запросов.



Асинхронная функция `create_uchetka` предназначена, вероятно, для создания новой записи в таблице `site_users`, представляющей учетную запись пользователя.
1. **Передача**: Функция принимает ссылку на объект `self`, представляющий экземпляр класса базы данных, `email` в виде строки, содержащей адрес электронной почты пользователя, и `password_hash` в виде строки, содержащей хэш пароля пользователя.

2. **Возвращаемое значение**: Функция возвращает либо целое число, предположительно идентификатор созданного пользователя, либо логическое значение `False` в случае ошибки.

3. **Описание действий функции**:
   - Она асинхронно устанавливает соединение с базой данных.
   - В транзакции выполняется SQL-запрос для вставки новой записи в таблицу `site_users` с предоставленным адресом электронной почты и хэшем пароля.
   - После успешного выполнения запроса на вставку, еще один запрос выполняется для выборки информации о созданном пользователе из базы данных.
   - Извлеченный идентификатор пользователя (`site_user_id`) возвращается в качестве результата функции.
   - Если происходит ошибка во время выполнения запросов, она логируется, и функция возвращает `False`.

Эта функция предназначена для создания новой учетной записи пользователя в базе данных и предоставляет асинхронный интерфейс для выполнения запросов..



Асинхронная функция `set_session` вероятно используется для обновления информации о сессии пользователя в таблице `site_users`
1. **Передача**: Функция принимает ссылку на объект `self`, представляющий экземпляр класса базы данных, `site_user_id` в виде целого числа, представляющего идентификатор пользователя, `token` в виде строки, содержащей токен сессии, и `expires` в виде целого числа, представляющего время истечения срока действия токена.

2. **Возвращаемое значение**: Функция не возвращает значения (возвращается `None`).

3. **Описание действий функции**:
   - Она асинхронно устанавливает соединение с базой данных.
   - В транзакции выполняется SQL-запрос для обновления записи в таблице `site_users`.
   - Запрос обновляет значения поля `token` и `expires` для пользователя с заданным `site_user_id`.
   - Обновление выполняется асинхронно с использованием ключевого слова `await`.
   - Если происходит ошибка во время выполнения запроса, она логируется, но функция не прерывается и не выбрасывает исключение.

Эта функция предназначена для обновления информации о сессии пользователя в базе данных и предоставляет асинхронный интерфейс для выполнения запросов.



Асинхронная функция `get_profile_by_key` используется, вероятно, для получения информации о пользователе из таблицы `site_users` по их токену сессии.
1. **Передача**: Функция принимает ссылку на объект `self`, представляющий экземпляр класса базы данных, и `token` в виде строки, содержащей токен сессии пользователя.

2. **Возвращаемое значение**: Функция возвращает либо объект типа `asyncpg.Record`, который, вероятно, содержит информацию о пользователе из базы данных, либо `None` в случае, если ничего не найдено.

3. **Описание действий функции**:
   - Она асинхронно устанавливает соединение с базой данных.
   - В транзакции выполняется SQL-запрос для выборки данных из таблицы `site_users` по заданному токену сессии.
   - Запрос выбирает все столбцы из таблицы, где `token` равен предоставленному значению. Он также ограничивает результат одной записью с помощью `LIMIT 1`.
   - Результат запроса сохраняется в переменную `res` с использованием `fetchrow`, который возвращает одну строку или `None`, если ничего не найдено.
   - Если запрос успешно завершается, функция возвращает результат запроса.
   - Если возникает ошибка, она логируется, но функция не прерывается и не выбрасывает исключение.

Эта функция предназначена для извлечения информации о пользователе из базы данных по их токену сессии, предоставляя асинхронный интерфейс для выполнения запросов.



Асинхронная функция `add_message` предназначена, для добавления нового сообщения в таблицу `messages`.
1. **Передача**: Функция принимает ссылку на объект `self`, представляющий экземпляр класса базы данных, `creator_id` в виде целого числа, представляющего идентификатор создателя сообщения, и `message_data` в виде строки, содержащей текст сообщения.

2. **Возвращаемое значение**: Функция возвращает логическое значение `True`, если сообщение было успешно добавлено, и `False` в случае ошибки.

3. **Описание действий функции**:
   - Она асинхронно устанавливает соединение с базой данных.
   - В транзакции выполняется SQL-запрос для вставки новой записи в таблицу `messages` с предоставленными данными о создателе, текстом сообщения и временем создания.
   - Для времени создания используется текущее время, округленное до ближайшего целого значения с использованием функции `math.floor` и `time.time()`.
   - Обновление выполняется асинхронно с использованием ключевого слова `await`.
   - Если происходит ошибка во время выполнения запроса, она логируется, и функция возвращает `False`.

Эта функция предназначена для добавления нового сообщения в базу данных и предоставляет асинхронный интерфейс для выполнения запросов.




Асинхронная функция `get_messages` используется, вероятно, для получения последних сообщений из таблицы `messages`.
1. **Передача**: Функция принимает ссылку на объект `self`, представляющий экземпляр класса базы данных.

2. **Возвращаемое значение**: Функция возвращает список сообщений в виде объектов типа `asyncpg.Record`.

3. **Описание действий функции**:
   - Она асинхронно устанавливает соединение с базой данных.
   - В транзакции выполняется SQL-запрос для выборки данных из таблицы `messages`.
   - Запрос выбирает все столбцы из таблицы, сортирует результаты в порядке убывания времени (`ORDER BY time DESC`) и ограничивает результат до последних 20 записей (`LIMIT 20`).
   - Результат запроса сохраняется в переменную `res` с использованием метода `fetch`, который возвращает список объектов типа `asyncpg.Record`.
   - Если запрос успешно завершается, функция возвращает список сообщений.
   - Если возникает ошибка, она логируется, но функция не прерывается и не выбрасывает исключение.

Эта функция предназначена для получения последних сообщений из базы данных и предоставляет асинхронный интерфейс для выполнения запросов.


2.2 Различные функции
Класс `ConnectionManager` представляет менеджер соединений для веб-сокетов. Вот краткое описание его методов:
1. `__init__(self, dbase) -> None`: Конструктор класса, инициализирует активные подключения как пустой список и принимает объект базы данных `dbase`.

2. `connect(self, websocket: WebSocket) -> None`: Метод для подключения нового пользователя. Он принимает объект веб-сокета `websocket`, принимает его и добавляет в список активных подключений.

3. `disconnect(self, websocket: WebSocket) -> None`: Метод для отключения пользователя. Принимает объект веб-сокета `websocket` и удаляет его из списка активных подключений.

4. `on_message(self, message: str, creator_id: int) -> None`: Метод для обработки полученных сообщений от пользователя. Записывает сообщение в базу данных, а затем отправляет его другим пользователям через веб-сокеты.

5. `get_online(self) -> int`: Метод для получения количества активных подключений по веб-сокетам.

Класс предназначен для управления подключениями к веб-сокетам, обработки сообщений и управления базой данных.



Функция `get_random_string` генерирует случайную строку указанной длины. Вот краткое описание ее работы:
1. **Параметры**: Функция принимает один необязательный параметр `length`, который указывает длину строки. По умолчанию `length` равен 48 символам.

2. **Возвращаемое значение**: Функция возвращает случайно сгенерированную строку.

3. **Описание действий функции**:
   - Функция использует библиотеки `random` и `string`, чтобы генерировать случайные символы.
   - Внутри цикла `for` используется функция `random.choice`, чтобы выбрать случайный символ из множества букв `string.ascii_letters` (строчные и заглавные буквы английского алфавита).
   - Выбранный символ добавляется к результирующей строке.
   - Процесс повторяется `length` раз (или 48, если `length` не указано).
   - В конце выполнения функция возвращает сгенерированную строку.

Эта функция полезна, когда требуется генерировать случайные и уникальные идентификаторы, токены или другие случайные данные в приложениях.



Функции `hash_password` и `validate_password` используются для хеширования паролей и проверки их валидности.
1. **`hash_password(password: str) -> str`**:
   - Эта функция принимает строку `password`, представляющую пароль пользователя, и хеширует его с использованием алгоритма SHA-256.
   - Возвращает хеш-строку в шестнадцатеричном формате.

2. **`validate_password(password: str, hashed_password_db: str) -> bool`**:
   - Эта функция принимает две строки: `password` (предполагаемый пароль пользователя) и `hashed_password_db` (хешированный пароль, сохраненный в базе данных).
   - Проверяет, соответствует ли хеш пароля, сгенерированный из предоставленного пароля, хешу, хранящемуся в базе данных.
   - Возвращает `True`, если хеши совпадают, и `False` в противном случае.

Эти функции обеспечивают безопасное хранение и сравнение паролей в приложении, что важно для защиты конфиденциальной информации пользователей.




Асинхронная функция `check_actuality` используется, вероятно, для проверки актуальности сеанса пользователя. Вот ее функциональное описание:
1. **Передача**: Функция принимает запрос `request`.

2. **Возвращаемое значение**: Функция возвращает логическое значение (`True` или `False`), указывающее, является ли сеанс актуальным.

3. **Описание действий функции**:
   - Функция сначала извлекает идентификатор сессии из cookies запроса (`session_id`).
   - Если идентификатор сессии найден (`sess`), она вызывает метод `get_profile_by_key` объекта `dbase`, чтобы получить профиль пользователя по этой сессии.
   - Если профиль найден (`profile`), функция проверяет, истекло ли время сессии, сравнивая текущее время с временем истечения сессии (`expires`), хранящимся в профиле пользователя.
   - Если время истечения сессии еще не наступило (`math.floor(time.time()) < profile['expires']`), функция возвращает `True`, указывая на актуальность сеанса.
   - Если сессия не найдена, профиль пользователя не найден или время сеанса истекло, функция возвращает `False`, указывая на неактуальность сеанса.

Эта функция предназначена для использования в аутентификации пользователя и позволяет приложению определить, действителен ли текущий сеанс пользователя.


2.3  Основные хендлеры запросов
Веб-приложение, использующее FastAPI для обработки запросов.

1. **`GET "/"`**: При запросе главной страницы проверяется актуальность сеанса пользователя. Если сеанс актуален, пользователь перенаправляется на страницу `/chat`, в противном случае - на страницу `/login`.

2. **`GET "/login"`**: При запросе страницы входа также происходит проверка актуальности сеанса. Если сеанс неактуален, возвращается HTML-файл с формой входа, иначе - пользователь перенаправляется на страницу `/chat`.

3. **`POST "/auth"`**: При аутентификации пользователя проверяется его имя пользователя и пароль. Если аутентификация прошла успешно, пользователю устанавливается новый сеанс, и ему отправляются куки. В противном случае возвращается сообщение об ошибке.

4. **`GET "/chat"`**: При запросе страницы чата также происходит проверка актуальности сеанса. Если сеанс актуален, возвращается HTML-файл с интерфейсом чата, иначе - пользователь перенаправляется на страницу `/login`.

5. **`GET "/logout"`**: При запросе на выход пользователя из системы проверяется его сеанс, после чего выполняется выход из системы путем удаления токена сессии и времени истечения срока действия токена.

6. **`WEBSOCKET "/ws"`**: При подключении к веб-сокету также происходит проверка актуальности сеанса. Если сеанс актуален, пользователю позволяется подключиться к веб-сокету и начать обмен сообщениями.

7. **`GET "/last"`**: При запросе последних сообщений также происходит проверка актуальности сеанса. Если сеанс актуален, возвращаются последние сообщения чата.

8. **`GET "/online"`**: При запросе количества онлайн-пользователей также происходит проверка актуальности сеанса. Если сеанс актуален, возвращается количество пользователей онлайн.


3.1 База данных для бота
Асинхронная функция `create_tables` используется, для создания таблицы `bot_users` в базе данных.
1. **Передача**: Функция не принимает дополнительных параметров, кроме ссылки на объект базы данных.

2. **Возвращаемое значение**: Функция не возвращает значения (возвращается `None`).

3. **Описание действий функции**:
   - Функция асинхронно устанавливает соединение с базой данных.
   - Внутри транзакции выполняется SQL-запрос для создания таблицы `bot_users` с несколькими полями: `user_id`, `username`, `is_admin`, `is_member`, `regtime`, `in_await`, `site_user_id`.
   - Параметр `user_id` уникален и не может быть пустым (`NOT NULL`), он также является первичным ключом таблицы (`PRIMARY KEY`).
   - Параметры `is_admin` и `is_member` по умолчанию установлены в 0, что может означать, что пользователь не является администратором и не является членом бота.
   - Параметр `regtime` представляет собой время регистрации пользователя.
   - Параметры `in_await` и `site_user_id` устанавливаются по умолчанию в 0 или NULL.
   - Запрос выполняется асинхронно с использованием ключевого слова `await`.
   - Функция завершается без возвращения каких-либо значений.

Эта функция предназначена для создания таблицы в базе данных и обеспечивает асинхронный интерфейс для выполнения запросов.


Функции для работы с пользователями в базе данных:

1. **`add_user(self, user_id: int, username: str) -> None`**: Добавляет нового пользователя в таблицу `bot_users`.
   - Принимает `user_id` (идентификатор пользователя) и `username` (имя пользователя).
   - Проверяет, существует ли пользователь с таким `user_id`.
   - Если пользователь не существует, выполняется запрос на вставку новой записи в таблицу с указанными `user_id`, `username` и текущим временем регистрации.
   
2. **`get_user(self, user_id) -> asyncpg.Record`**: Получает информацию о пользователе по его `user_id`.
   - Принимает `user_id` (идентификатор пользователя).
   - Выполняет запрос на выборку информации о пользователе из таблицы `bot_users` по указанному `user_id`.
   - Возвращает запись о пользователе в виде объекта `asyncpg.Record`.

3. **`edit_user(self, user_id, pole, status) -> None`**: Редактирует информацию о пользователе в таблице `bot_users`.
   - Принимает `user_id` (идентификатор пользователя), `pole` (название поля для редактирования) и `status` (новое значение поля).
   - Выполняет запрос на обновление указанного поля `pole` на значение `status` для пользователя с заданным `user_id`.

Каждая из этих функций асинхронно устанавливает соединение с базой данных, использует транзакцию для выполнения запроса и обрабатывает возможные ошибки, логируя их.


3.2 Функции / Классы используемые в боте:
Два класса для машины конечного автомата (FSM), каждый из которых представляет собой определенный этап процесса в приложении.

1. **`new_user`**: Класс для FSM машины, отвечающей за подачу заявки.
   - Включает в себя три состояния: `name`, `age`, `group`, каждое из которых представляет этапы процесса подачи заявки на регистрацию нового пользователя.

2. **`register_uchetka`**: Класс для FSM машины, отвечающей за регистрацию учетной записи.
   - Включает в себя два состояния: `mail` и `mail_code`, которые представляют этапы процесса регистрации учетной записи, включая ввод электронной почты и подтверждение по почте.

Эти классы используются для управления состояниями процессов и переходами между этими состояниями в приложении, например, при создании или регистрации новых пользователей. Каждое состояние может иметь свои собственные параметры и логику выполнения, в зависимости от конкретных потребностей приложения.



Функция `load_start_kb` предназначена для загрузки клавиатуры в зависимости от наличия у пользователя учетной записи.

1. **Входные параметры**: Функция принимает объект пользователя `user`, который вероятно содержит информацию о его учетной записи.

2. **Возвращаемое значение**: Функция возвращает объект клавиатуры `ReplyKeyboardMarkup`.

3. **Описание действий функции**:
   - Создается новый объект клавиатуры `ret` с возможностью изменения размера кнопок (`resize_keyboard=True`).
   - Проверяется наличие у пользователя учетной записи через атрибут `site_user_id`.
   - Если у пользователя есть учетная запись (`user['site_user_id']`), добавляется кнопка для просмотра профиля (`profile_btn`).
   - Если у пользователя нет учетной записи, добавляется кнопка для добавления профиля (`profile_add_btn`).
   - В обоих случаях также добавляется кнопка для получения информации (`information_btn`).
   - Возвращается объект клавиатуры `ret` с добавленными кнопками.

Эта функция позволяет динамически формировать клавиатуру в зависимости от состояния пользователя и облегчает взаимодействие с ним в чат-интерфейсе.

Фильтры:
1. **`is_private`**: Фильтр для проверки, отправлено ли сообщение в личном чате.
   - Если сообщение не отправлено в личном чате, фильтр возвращает `False`, иначе - `True`.

2. **`start_ob`**: Фильтр для обработки команды "Start" или нажатия кнопки "Назад".
   - Проверяет пользователя по его идентификатору из сообщения.
   - Завершает текущее состояние пользователя.
   - Проверяет статус пользователя (администратор, участник, ожидание рассмотрения заявки) и отправляет соответствующее сообщение.
   - Возвращает `False`, если сообщение было обработано, иначе - `True`.

3. **`profile_add_ob`**: Фильтр для обработки создания учетной записи.
   - Проверяет, является ли пользователь участником и не имеет ли он уже учетной записи.
   - Возвращает `True`, если условие выполняется, иначе - `False`.

4. **`profile_get_ob`**: Фильтр для обработки получения профиля.
   - Проверяет, является ли пользователь участником и имеет ли он уже учетную запись.
   - Возвращает `True`, если условие выполняется, иначе - `False`.

Эти фильтры используются для выборочной обработки сообщений и команд, исходя из текущего состояния пользователя и других условий.

Функции **`mail_pattern`** и **`send_code`**:
1. **`mail_pattern(mail) -> bool`**: Проверяет валидность электронной почты по шаблону.
   - Принимает строку `mail`, представляющую электронную почту.
   - Проверяет домен электронной почты, чтобы он принадлежал одному из допустимых доменов из конфигурации (`cfg.domains`).
   - Если домен соответствует допустимым доменам, функция использует шаблон `fnmatch` для проверки формата электронной почты.
   - Возвращает `True`, если электронная почта соответствует шаблону, иначе - `False`.

2. **`send_code(mail_st, mail, code) -> None`**: Отправляет код подтверждения на указанный адрес электронной почты.
   - Асинхронно отправляет сообщение с кодом подтверждения на адрес электронной почты `mail` через объект `mail_st`.
   - Использует адрес отправителя из конфигурации (`cfg.email`).
   - В теле сообщения указывается код подтверждения `code`.

Эти функции используются для проверки валидности электронной почты и отправки кода подтверждения на указанный адрес электронной почты.



3.3 Хендлеры сообщений / CallbackData:

1. **`back`**: Обработчик сообщений для команды "Назад ⬅".
   - Завершает текущее состояние пользователя.
   - Отправляет сообщение с предложением подать заявку на регистрацию.
   
2. **`start`**: Обработчик сообщений для команды "/start" и начального состояния пользователя.
   - Добавляет пользователя в базу данных, если его там еще нет.
   - Отправляет сообщение с предложением подать заявку на регистрацию.
   
3. **`zayav_start`**: Обработчик сообщений для начала процесса подачи заявки на регистрацию.
   - Отправляет сообщение с запросом имени пользователя.
   - Устанавливает состояние `new_user.name`.

4. **`set_name`**: Обработчик сообщений для установки имени пользователя.
   - Сохраняет имя пользователя в состояние.
   - Отправляет сообщение с запросом возраста пользователя.
   - Устанавливает состояние `new_user.age`.

5. **`set_age`**: Обработчик сообщений для установки возраста пользователя.
   - Сохраняет возраст пользователя в состояние.
   - Отправляет сообщение с запросом группы пользователя.
   - Устанавливает состояние `new_user.group`.

6. **`set_group`**: Обработчик сообщений для установки группы пользователя и завершения процесса подачи заявки.
   - Отправляет сообщение с информацией о новой заявке администратору.
   - Устанавливает флаг `in_await` для пользователя в базе данных.
   - Отправляет пользователю сообщение о том, что его заявка отправлена на рассмотрение.
   
7. **`accept` и `decline`**: Обработчики callback-кнопок для подтверждения или отклонения заявки администратором.
   - Меняют статус заявки в базе данных (принят/не принят).
   - Отправляют соответствующее сообщение пользователю.
   
8. **`uchetka_add`**: Обработчик сообщений для начала процесса создания учетной записи.
   - Отправляет сообщение с запросом ввода почты.
   - Устанавливает состояние `register_uchetka.mail`.
   
9. **`set_mail` и `set_code`**: Обработчики сообщений для установки почты и кода подтверждения при создании учетной записи.
   - Проверяют валидность почты.
   - Отправляют код подтверждения на указанную почту.
   - Создают учетную запись в базе данных.
   - Отправляют сообщение с уведомлением об успешном создании учетной записи и паролем пользователя.
   
10. **`uchetka_get`**: Обработчик сообщений для просмотра учетной записи.
    - Отправляет информацию о профиле пользователя.
    
11. **`information`**: Обработчик сообщений для получения информации о проекте.
    - Отправляет сообщение с информацией о проекте.

Эти обработчики позволяют боту взаимодействовать с пользователями, обрабатывать их запросы и поддерживать состояния для управления процессами, такими как регистрация и подача заявок.